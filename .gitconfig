[user]
	name = Brady Clifford
	email = brady.clifford@extendhealth.com

[core]
  autocrlf = input
	excludesfile = /Users/brcl/.gitignore_global

[http]
  sslverify = false

[fetch]
  prune = true

[pull]
  ff = only

[push]
    default = tracking

[github]
  user = bradyclifford

[includeIf "gitdir:~/Projects/GitHub.Work/"]
  path = .gitconfig_work

[alias]
  alias = config --get-regexp ^alias\\.
  pusho = !git push origin HEAD
  unstage = reset HEAD
  shead = reset --soft HEAD~1
  squash = reset $(git merge-base main $(git rev-parse --abbrev-ref HEAD)) 
  amend = commit --amend --no-edit
  ap = !git commit --amend --no-edit && git push -f

  co = checkout
  ci = commit -m
  di = diff --staged
  stashu = stash --keep-index -u

  # Rebase the current branch off the default branch (see def above). You can
  # also choose to pass in a branch name if you are trying to rebase from a
  # different branch.
  #
  brebase = !sh -c 'def=$(git def) && git checkout ${1:-$def} && git fetch origin && git merge origin/${1:-$def} --ff-only && git checkout @{-1} && git rebase ${1:-$def}' -

  # Pull the latest from upstream and push it to my fork at origin
  updef = !def=$(git def) && git checkout $def && git fetch upstream && git merge upstream/$def --ff-only && git push origin HEAD

  # Log aliases
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  lga = log --graph --pretty=oneline --abbrev-commit --decorate --all
  ll = log --pretty=format:'%C(yellow)%h%C(reset) -%C(red)%d%C(reset) %s %C(green)(%cr) %C(cyan)[%an]%C(reset)' --abbrev-commit --date=relative --decorate
  lstat = log --name-status --abbrev-commit --date=local --pretty=format:'%C(yellow)%h%C(red)%d%C(reset) %C(cyan)%cr %C(green)[%cn] %Creset%C(yellow)%n%s'

  # Misc
  fmerge = merge --ff-only
  stache = stash save -u
  cia = commit --amend -C HEAD
  rbc = rebase --continue
  mylog = !git log --author=\"$(git config user.name)\"

  # Advanced
  # https://www.atlassian.com/blog/git/advanced-git-aliases
  bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
  new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  changes = "!f() { git log --all --source -- $1 | grep -o 'refs/heads/.*' | sort -u | xargs -I '{}' git log -1 --format=%aI%x20%S '{}' -- $1 | sort -r; }; f"

[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process

[difftool]
  prompt = false

[diff]
  tool = bc3
  prompt = false

[merge]
  tool = bc3
  keepBackup = false

[mergetool "bc3"]
  trustExitCode = false
  keepTemporaries = false
  keepBackup = false

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
  
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[commit]
	template = /Users/brcl/.stCommitMsg
